#!/bin/bash

THEME_BASE_DIR="$HOME/.config/theme"
THEMES_CONF="$THEME_BASE_DIR/themes.conf"
CURRENT_THEME_NAME=$(cat "$THEME_BASE_DIR/current_theme" 2>/dev/null || echo "nord")

# Parse themes.conf to get all theme names
get_theme_names() {
  grep -E "^[a-z-]+ = " "$THEMES_CONF" | cut -d' ' -f1 | sort
}

# Get display name for a theme
get_display_name() {
  local theme="$1"
  local display_name
  display_name=$(awk -F' = ' "/^\[metadata\.${theme}\]/{f=1} f && /^display_name =/{gsub(/\"/, \"\", \$2); print \$2; exit}" "$THEMES_CONF")
  
  # If no display name found, convert theme name to title case
  if [[ -z "$display_name" ]]; then
    display_name=$(echo "$theme" | sed -E 's/(^|-)([a-z])/\1\u\2/g; s/-/ /g')
  fi
  
  echo "$display_name"
}

# Build themes list with pretty display names
mapfile -t themes < <(
  get_theme_names | while read -r theme_name; do
    display_name=$(get_display_name "$theme_name")
    
    if [[ "$theme_name" == "$CURRENT_THEME_NAME" ]]; then
      echo "<i>$display_name</i>"
    else
      echo "$display_name"
    fi
  done
)

# Show Wofi menu
selection=$(printf '%s\n' "${themes[@]}" | wofi \
  --show dmenu \
  --allow-markup \
  --width 250 \
  -O alphabetical \
  --color "$HOME/.config/wofi/colors" \
  --prompt "Theme:" 2>/dev/null)

# Exit if no selection
[[ -z "$selection" ]] && exit 0

# Remove markup and convert back to theme name
clean_selection=$(echo "$selection" | sed -E 's/<[^>]+>//g')
selected_theme=$(echo "$clean_selection" | tr '[:upper:]' '[:lower:]' | tr ' ' '-')

# Apply the selected theme
"$(dirname "$0")/theme-set" "$selected_theme"