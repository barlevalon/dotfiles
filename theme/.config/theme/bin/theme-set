#!/bin/bash
set -euo pipefail

# theme-set: Set a theme using tinty
# Usage: theme-set <theme-name>

if [[ -z "${1:-}" ]]; then
  echo "Usage: theme-set <theme-name>" >&2
  exit 1
fi

THEME_NAME="$1"
THEME_BASE_DIR="$HOME/.config/theme"
THEMES_CONF="$THEME_BASE_DIR/themes.conf"

# Parse themes.conf to get tinty scheme name
get_tinty_scheme() {
  local theme="$1"
  grep "^${theme} = " "$THEMES_CONF" | cut -d'"' -f2
}

# Get theme metadata
get_theme_metadata() {
  local theme="$1"
  local key="$2"
  awk -F' = ' "/^\[metadata\.${theme}\]/{f=1} f && /^${key} =/{gsub(/\"/, \"\", \$2); print \$2; exit}" "$THEMES_CONF"
}

# Get tinty scheme name
TINTY_SCHEME=$(get_tinty_scheme "$THEME_NAME")
if [[ -z "$TINTY_SCHEME" ]]; then
  echo "Theme '$THEME_NAME' not found in $THEMES_CONF" >&2
  exit 2
fi

# Apply theme with tinty
echo "Applying theme: $THEME_NAME (scheme: $TINTY_SCHEME)"
tinty apply "$TINTY_SCHEME"

# Save current theme name
echo "$THEME_NAME" > "$THEME_BASE_DIR/current_theme"

# Generate custom themes for apps without official templates
"$(dirname "$0")/generate-custom-themes"

# Handle custom Starship integration
update_starship_theme() {
  local theme_file="$HOME/.config/starship-theme.toml"
  local config_file="$HOME/.config/starship.toml"
  
  [[ ! -f "$theme_file" ]] || [[ ! -f "$config_file" ]] && return
  
  # Update palette line
  if grep -q "^palette = " "$config_file"; then
    sed -i 's/^palette = .*/palette = "base16"/' "$config_file"
  else
    sed -i '/^command_timeout/a palette = "base16"' "$config_file"
  fi
  
  # Remove old palette definitions and append new ones
  sed -i '/^\[palettes\./,$d' "$config_file"
  echo "" >> "$config_file"
  cat "$theme_file" | grep -A 1000 "^\[palettes\." >> "$config_file"
}

# Update GNOME theme based on light/dark
update_gnome_theme() {
  local is_light=$(get_theme_metadata "$THEME_NAME" "is_light")
  if [[ "$is_light" == "true" ]]; then
    gsettings set org.gnome.desktop.interface color-scheme "prefer-light" 2>/dev/null || true
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita" 2>/dev/null || true
  else
    gsettings set org.gnome.desktop.interface color-scheme "prefer-dark" 2>/dev/null || true
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark" 2>/dev/null || true
  fi
}

# Restart UI components
restart_ui_components() {
  # Restart waybar
  pkill waybar 2>/dev/null || true
  uwsm app -- waybar >/dev/null 2>&1 &
  
  # Reload mako and hyprland
  makoctl reload 2>/dev/null || true
  hyprctl reload 2>/dev/null || true
  
  # Kill launchers to force theme reload on next launch
  pkill wofi 2>/dev/null || true
  pkill walker 2>/dev/null || true
  pkill rofi 2>/dev/null || true
  
  # Restart SwayOSD
  pkill swayosd-server 2>/dev/null || true
  uwsm app -- swayosd-server >/dev/null 2>&1 &
}

# Reload tmux configuration
reload_tmux() {
  if pgrep tmux >/dev/null 2>&1; then
    tmux source-file "$HOME/.config/tmux/tmux.conf" 2>/dev/null || true
  fi
}

# Reload neovim theme
reload_neovim() {
  for nvim_socket in /tmp/nvim*.sock; do
    if [[ -S "$nvim_socket" ]]; then
      nvim --server "$nvim_socket" --remote-send ':colorscheme base16-current<CR>' 2>/dev/null || true
    fi
  done
}

# Reload qutebrowser theme
reload_qutebrowser() {
  if pgrep -x qutebrowser >/dev/null 2>&1; then
    # First source the theme
    qutebrowser ":config-source" 2>/dev/null || true
    
    # Then set darkmode based on theme type
    local is_light=$(get_theme_metadata "$THEME_NAME" "is_light")
    if [[ "$is_light" == "true" ]]; then
      # Disable dark mode for light themes
      qutebrowser ":set colors.webpage.darkmode.enabled false" 2>/dev/null || true
    else
      # Enable dark mode for dark themes
      qutebrowser ":set colors.webpage.darkmode.enabled true" 2>/dev/null || true
    fi
  fi
}

# Set background
set_background() {
  local bg_dir="$THEME_BASE_DIR/backgrounds/$THEME_NAME"
  [[ ! -d "$bg_dir" ]] && return
  
  # Get first background file (sorted)
  local bg_file
  bg_file=$(find "$bg_dir" -type f \( -name "*.jpg" -o -name "*.png" -o -name "*.jpeg" -o -name "*.webp" \) | sort | head -1)
  [[ -z "$bg_file" ]] && return
  
  # Create symlink for autostart
  ln -nsf "$bg_file" "$THEME_BASE_DIR/background.jpg"
  
  # Restart swaybg
  pkill -x swaybg 2>/dev/null || true
  uwsm app -- swaybg -i "$bg_file" -m fill >/dev/null 2>&1 &
}

# Apply all theme changes
update_starship_theme
update_gnome_theme
restart_ui_components
reload_tmux
reload_neovim
reload_qutebrowser
set_background

echo "Theme '$THEME_NAME' applied successfully"

# Note: FZF colors in existing shells need manual reload via 'theme-reload'
# This is a limitation of how the tinted-fzf template uses universal variables

# Note about fish reload
if [[ -f "$HOME/.config/fish/conf.d/base16.fish" ]]; then
  echo "Note: Run 'theme-reload' in existing fish shells to update colors"
fi