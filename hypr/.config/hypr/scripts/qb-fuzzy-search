#!/bin/bash
set -euo pipefail

# Configuration
readonly HISTORY_LIMIT=500
readonly SESSION_FILE="/tmp/qb-fuzzy-search-session.yml"
readonly QB_CONFIG_DIR="$HOME/.config/qutebrowser"
readonly QB_DATA_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/qutebrowser"
readonly CURRENT_THEME=$(cat "$HOME/.config/theme/current_theme" 2>/dev/null || echo "nord")
readonly THEME_PATH="$HOME/dotfiles/theme/.config/theme/themes/$CURRENT_THEME/rofi.rasi"

# Helper functions
is_qb_running() {
    pgrep -x qutebrowser > /dev/null
}

extract_url() {
    echo "$1" | sed 's/.* - //'
}

ensure_protocol() {
    local url="$1"
    if [[ ! "$url" =~ ^https?:// && ! "$url" =~ ^file:// && ! "$url" =~ ^about: ]]; then
        echo "https://$url"
    else
        echo "$url"
    fi
}

# Function to ensure QB window on workspace 1
ensure_qb_on_ws1_and_focus() {
    # Switch to workspace 1
    hyprctl dispatch workspace 1
    
    # Check if there's a QB window on ws1
    local qb_on_ws1=$(hyprctl clients -j | jq -r '.[] | select(.class == "org.qutebrowser.qutebrowser" and .workspace.id == 1) | .address' | head -1)
    
    if [ -n "$qb_on_ws1" ]; then
        # QB exists on ws1, focus it to make it receive commands
        hyprctl dispatch focuswindow address:$qb_on_ws1
        return 0  # QB already exists on ws1
    else
        return 1  # No QB on ws1
    fi
}

handle_search() {
    local query="$1"
    # Try to focus QB on ws1
    if ensure_qb_on_ws1_and_focus; then
        # QB exists on ws1 and is now focused, search in new tab
        qutebrowser ":open -t -- $query"
    else
        # No QB on ws1, start new window with search
        qutebrowser --target window "$query"
    fi
}

# Check if our specific rofi instance is running
if pgrep -f "rofi.*Qutebrowser" > /dev/null; then
    # Our qb-fuzzy-search rofi is running, kill it (toggle off)
    pkill -x rofi
    exit 0
fi

# Kill any other rofi instance that might be running
pkill -x rofi 2>/dev/null || true

# Temporary file for entries
TEMP_FILE=$(mktemp)
trap "rm -f $TEMP_FILE" EXIT

# Save current session if qutebrowser is running
if is_qb_running; then
    # Save current workspace and window
    CURRENT_WORKSPACE=$(hyprctl activeworkspace -j | jq -r '.id')
    CURRENT_WINDOW=$(hyprctl activewindow -j | jq -r '.address')
    
    # Save session (this will switch focus)
    qutebrowser ":session-save --quiet $SESSION_FILE" 2>/dev/null
    
    # Immediately restore focus to original workspace and window
    hyprctl dispatch workspace $CURRENT_WORKSPACE
    hyprctl dispatch focuswindow address:$CURRENT_WINDOW
    
    # Parse session file for open tabs
    if [ -n "$SESSION_FILE" ] && [ -f "$SESSION_FILE" ]; then
        # Parse with yq (go version)
        yq eval '.windows[].tabs[] as $tab | 
            $tab.history[] | 
            select(.active == true and .url != null and .url != "about:blank") | 
            (select($tab.active) | "[TAB*] " + (.title // .url) + " - " + .url) // 
            (select($tab.active | not) | "[TAB] " + (.title // .url) + " - " + .url)' "$SESSION_FILE" >> "$TEMP_FILE" 2>/dev/null
    fi
fi

# Add quickmarks if file exists
if [ -f "$QB_CONFIG_DIR/quickmarks" ]; then
    while IFS=' ' read -r name url; do
        echo "[QM] $name - $url" >> "$TEMP_FILE"
    done < "$QB_CONFIG_DIR/quickmarks"
fi

# Add bookmarks if file exists
if [ -f "$QB_CONFIG_DIR/bookmarks/urls" ]; then
    while IFS=' ' read -r url title; do
        # Bookmarks format is "url title"
        # Add https:// if no protocol specified
        url=$(ensure_protocol "$url")
        echo "[BM] ${title:-$url} - $url" >> "$TEMP_FILE"
    done < "$QB_CONFIG_DIR/bookmarks/urls"
fi

# Add history from SQLite database
if [ -f "$QB_DATA_DIR/history.sqlite" ]; then
    # Get last 500 unique URLs from history, ordered by most recent
    sqlite3 "$QB_DATA_DIR/history.sqlite" \
        "SELECT DISTINCT url, title FROM CompletionHistory ORDER BY last_atime DESC LIMIT ${HISTORY_LIMIT}" \
        | while IFS='|' read -r url title; do
            # Skip empty URLs
            [ -z "$url" ] && continue
            # Use URL as title if title is empty
            echo "[H] ${title:-$url} - $url" >> "$TEMP_FILE"
        done
fi



# Check if we have any entries
if [ ! -s "$TEMP_FILE" ]; then
    notify-send "QB Fuzzy Search" "No bookmarks, quickmarks, or history found"
    exit 1
fi

# Use rofi to select an entry
# -dmenu: dmenu mode
# -i: case insensitive
# -p: prompt
# -theme: use our custom theme directly
# -kb-accept-custom: Ctrl+Return accepts custom input (for search)
# -matching fuzzy: fuzzy matching like modern launchers
# Check exit code: 0 = normal selection, 10 = custom input (Ctrl+Return)
SELECTED=$(cat "$TEMP_FILE" | rofi -dmenu -i -p " " \
    -kb-accept-custom "Control+Return" \
    -matching fuzzy \
    -theme "$THEME_PATH")
ROFI_EXIT=$?

# Exit if nothing selected (ESC pressed)
[ -z "$SELECTED" ] && exit 0

# Check if Ctrl+Return was pressed (exit code 10) - force search
if [ $ROFI_EXIT -eq 10 ]; then
    handle_search "$SELECTED"
    exit 0
fi

# Check if the selected text matches any entry in our list
if ! grep -Fxq "$SELECTED" "$TEMP_FILE"; then
    # User typed something that's not in the list - treat as search query
    handle_search "$SELECTED"
    exit 0
fi

# Check what type of entry was selected
if [[ "$SELECTED" =~ ^\[TAB\*?\] ]]; then
    # This is an open tab - extract URL and focus it
    URL=$(extract_url "$SELECTED")
    
    # Use tab-select with URL pattern to focus the tab
    qutebrowser ":tab-select $URL"
    
elif [[ "$SELECTED" =~ ^\[QM\] ]]; then
    # Extract quickmark name (between [QM] and -)
    QM_NAME=$(echo "$SELECTED" | sed 's/^\[QM\] \([^ ]*\) - .*/\1/')
    
    # Try to focus QB on ws1
    if ensure_qb_on_ws1_and_focus; then
        # QB exists on ws1 and is now focused, send command to it
        qutebrowser ":quickmark-load -t $QM_NAME"
    else
        # No QB on ws1 (but might exist on other workspaces)
        # We're already on ws1, start a NEW instance there with the URL
        QM_URL=$(grep "^$QM_NAME " "$QB_CONFIG_DIR/quickmarks" | cut -d' ' -f2-)
        if [ -n "$QM_URL" ]; then
            QM_URL=$(ensure_protocol "$QM_URL")
            # Force new window to avoid sending to other workspace instances
            qutebrowser --target window "$QM_URL"
        else
            qutebrowser --target window
        fi
    fi
else
    # Not a quickmark, tab, or search item - extract URL normally
    URL=$(extract_url "$SELECTED")
    
    # Check if URL is valid
    if [ -z "$URL" ] || [[ ! "$URL" =~ ^https?:// && ! "$URL" =~ ^file:// && ! "$URL" =~ ^about: ]]; then
        notify-send "QB Fuzzy Search" "Invalid URL: $URL"
        exit 1
    fi
    
    # Try to focus QB on ws1
    if ensure_qb_on_ws1_and_focus; then
        # QB exists on ws1 and is now focused, open in new tab
        qutebrowser ":open -t $URL"
    else
        # No QB on ws1, start new window with the URL
        qutebrowser --target window "$URL"
    fi
fi