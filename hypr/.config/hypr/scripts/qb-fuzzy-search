#!/bin/bash

# Check if our specific rofi instance is running
if pgrep -f "rofi.*Qutebrowser" > /dev/null; then
    # Our qb-fuzzy-search rofi is running, kill it (toggle off)
    pkill -x rofi
    exit 0
fi

# Kill any other rofi instance that might be running
pkill -x rofi 2>/dev/null

# Temporary file for entries
TEMP_FILE=$(mktemp)

# Fixed session file location
SESSION_FILE="/tmp/qb-fuzzy-search-session.yml"

# Create separate temp files for each category to control order
TABS_FILE=$(mktemp)
QM_FILE=$(mktemp)
BM_FILE=$(mktemp)
HISTORY_FILE=$(mktemp)
trap "rm -f $TEMP_FILE $TABS_FILE $QM_FILE $BM_FILE $HISTORY_FILE" EXIT

# Save current session if qutebrowser is running
if pgrep -x qutebrowser > /dev/null; then
    qutebrowser ":session-save --quiet $SESSION_FILE" 2>/dev/null
    
    # Parse session file for open tabs
    if [ -f "$SESSION_FILE" ]; then
        # Parse with yq (go version)
        yq eval '.windows[].tabs[] as $tab | 
            $tab.history[] | 
            select(.active == true and .url != null and .url != "about:blank") | 
            (select($tab.active) | "[TAB*] " + (.title // .url) + " - " + .url) // 
            (select($tab.active | not) | "[TAB] " + (.title // .url) + " - " + .url)' "$SESSION_FILE" >> "$TABS_FILE" 2>/dev/null
    fi
fi

# Add quickmarks if file exists
if [ -f ~/.config/qutebrowser/quickmarks ]; then
    while IFS=' ' read -r name url; do
        echo "[QM] $name - $url" >> "$QM_FILE"
    done < ~/.config/qutebrowser/quickmarks
fi

# Add bookmarks if file exists
if [ -f ~/.config/qutebrowser/bookmarks ]; then
    while IFS=' ' read -r url title; do
        # Bookmarks format is "url title"
        # Add https:// if no protocol specified
        if [[ ! "$url" =~ ^https?:// && ! "$url" =~ ^file:// && ! "$url" =~ ^about: ]]; then
            url="https://$url"
        fi
        echo "[BM] ${title:-$url} - $url" >> "$BM_FILE"
    done < ~/.config/qutebrowser/bookmarks
fi

# Add history from SQLite database
if [ -f ~/.local/share/qutebrowser/history.sqlite ]; then
    # Get last 500 unique URLs from history, ordered by most recent
    sqlite3 ~/.local/share/qutebrowser/history.sqlite \
        "SELECT DISTINCT url, title FROM CompletionHistory ORDER BY last_atime DESC LIMIT 500" \
        | while IFS='|' read -r url title; do
            # Skip empty URLs
            [ -z "$url" ] && continue
            # Use URL as title if title is empty
            echo "[H] ${title:-$url} - $url" >> "$HISTORY_FILE"
        done
fi

# Combine files in the correct order: TAB, QM, BM, SEARCH, H
cat "$TABS_FILE" >> "$TEMP_FILE" 2>/dev/null
cat "$QM_FILE" >> "$TEMP_FILE" 2>/dev/null
cat "$BM_FILE" >> "$TEMP_FILE" 2>/dev/null
# No need for SEARCH item - Ctrl+Return forces search
cat "$HISTORY_FILE" >> "$TEMP_FILE" 2>/dev/null

# Check if we have any entries
if [ ! -s "$TEMP_FILE" ]; then
    notify-send "QB Fuzzy Search" "No bookmarks, quickmarks, or history found"
    exit 1
fi

# Use rofi to select an entry
# -dmenu: dmenu mode
# -i: case insensitive
# -p: prompt
# -theme: use our custom theme directly
# -kb-accept-custom: Ctrl+Return accepts custom input (for search)
# -matching fuzzy: fuzzy matching like modern launchers
# Check exit code: 0 = normal selection, 10 = custom input (Ctrl+Return)
SELECTED=$(cat "$TEMP_FILE" | rofi -dmenu -i -p " " \
    -kb-accept-custom "Control+Return" \
    -matching fuzzy \
    -theme "/home/alon/dotfiles/theme/.config/theme/themes/nord/rofi.rasi")
ROFI_EXIT=$?

# Exit if nothing selected (ESC pressed)
[ -z "$SELECTED" ] && exit 0

# Check if Ctrl+Return was pressed (exit code 10) - force search
if [ $ROFI_EXIT -eq 10 ]; then
    # User wants to search for what they typed
    SEARCH_QUERY="$SELECTED"
    
    # Open search in qutebrowser
    if pgrep -x qutebrowser > /dev/null; then
        # Qutebrowser is running, open search in new tab
        qutebrowser ":open -t -- $SEARCH_QUERY"
    else
        # Qutebrowser not running, start it with search
        qutebrowser "-- $SEARCH_QUERY"
    fi
    exit 0
fi

# Check if the selected text matches any entry in our list
if ! grep -Fxq "$SELECTED" "$TEMP_FILE"; then
    # User typed something that's not in the list - treat as search query
    SEARCH_QUERY="$SELECTED"
    
    # Open search in qutebrowser
    if pgrep -x qutebrowser > /dev/null; then
        # Qutebrowser is running, open search in new tab
        qutebrowser ":open -t -- $SEARCH_QUERY"
    else
        # Qutebrowser not running, start it with search
        qutebrowser "-- $SEARCH_QUERY"
    fi
    exit 0
fi

# Check what type of entry was selected
if [[ "$SELECTED" =~ ^\[TAB\*?\] ]]; then
    # This is an open tab - extract URL and focus it
    URL=$(echo "$SELECTED" | sed 's/.* - //')
    
    # Use tab-select with URL pattern to focus the tab
    qutebrowser ":tab-select $URL"
    
elif [[ "$SELECTED" =~ ^\[QM\] ]]; then
    # Extract quickmark name (between [QM] and -)
    QM_NAME=$(echo "$SELECTED" | sed 's/^\[QM\] \([^ ]*\) - .*/\1/')
    
    # Open quickmark in qutebrowser
    if pgrep -x qutebrowser > /dev/null; then
        # Qutebrowser is running, use quickmark-load in new tab
        qutebrowser ":quickmark-load -t $QM_NAME"
    else
        # Qutebrowser not running, start it with the quickmark URL directly
        # First get the URL from quickmarks file
        QM_URL=$(grep "^$QM_NAME " ~/.config/qutebrowser/quickmarks | cut -d' ' -f2-)
        if [ -n "$QM_URL" ]; then
            # Add protocol if missing
            [[ ! "$QM_URL" =~ ^https?:// ]] && QM_URL="https://$QM_URL"
            qutebrowser "$QM_URL"
        else
            # Fallback if URL not found
            qutebrowser
        fi
    fi
else
    # Not a quickmark, tab, or search item - extract URL normally
    URL=$(echo "$SELECTED" | sed 's/.* - //')
    
    # Check if URL is valid
    if [ -z "$URL" ] || [[ ! "$URL" =~ ^https?:// && ! "$URL" =~ ^file:// && ! "$URL" =~ ^about: ]]; then
        notify-send "QB Fuzzy Search" "Invalid URL: $URL"
        exit 1
    fi
    
    # Open URL in qutebrowser
    if pgrep -x qutebrowser > /dev/null; then
        # Qutebrowser is running, open in new tab
        qutebrowser ":open -t $URL"
    else
        # Qutebrowser not running, start it with URL
        qutebrowser "$URL"
    fi
fi