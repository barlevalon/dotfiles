format = """
$username\
$directory\
$git_branch\
$git_commit\
$git_state\
$git_metrics\
$git_status\
$docker_context\
$package\
$terraform\
$aws\
$kubernetes\
${custom.reboot}\
$cmd_duration\
$line_break\
$battery\
$jobs\
$status\
$character"""

command_timeout = 2000
palette = "base16"

[aws]
symbol = "‚òÅÔ∏è "
format = '\[[$symbol($profile)($region)(\[$duration\])]($style)\]'

# [aws.region_aliases]
# il-central-1 = "tel aviv"
# eu-west-1 = "ireland"
# eu-central-1 = "frankfurt"
# eu-west-2 = "london"
# eu-north-1 = "stockholm"
# us-east-1 = "n. virginia"
# us-east-2 = "ohio"
# us-west-1 = "n. california"
# us-west-2 = "oregon"

[c]
format = '\[[$symbol($version(-$name))]($style)\]'

[cmake]
format = '\[[$symbol($version)]($style)\]'

[cmd_duration]
format = '\[[‚è± $duration]($style)\]'

[cobol]
format = '\[[$symbol($version)]($style)\]'

[conda]
format = '\[[$symbol$environment]($style)\]'

[crystal]
format = '\[[$symbol($version)]($style)\]'

[dart]
format = '\[[$symbol($version)]($style)\]'

[deno]
format = '\[[$symbol($version)]($style)\]'

[docker_context]
format = '\[[$symbol$context]($style)\]'

[dotnet]
format = '\[[$symbol($version)(üéØ $tfm)]($style)\]'

[elixir]
format = '\[[$symbol($version \(OTP $otp_version\))]($style)\]'

[elm]
format = '\[[$symbol($version)]($style)\]'

[erlang]
format = '\[[$symbol($version)]($style)\]'

[gcloud]
format = '\[[$symbol$account(@$domain)(\($region\))]($style)\]'

[git_branch]
format = '\[[$symbol$branch]($style)\]'

[git_status]
format = '([\[$all_status$ahead_behind\]]($style))'

[golang]
format = '\[[$symbol($version)]($style)\]'

[haskell]
format = '\[[$symbol($version)]($style)\]'

[helm]
format = '\[[$symbol($version)]($style)\]'

[hg_branch]
format = '\[[$symbol$branch]($style)\]'

[java]
format = '\[[$symbol($version)]($style)\]'

[julia]
format = '\[[$symbol($version)]($style)\]'

[kotlin]
format = '\[[$symbol($version)]($style)\]'

[kubernetes]
disabled = false
format = '\[[$symbol$context( \($namespace\))]($style)\]'

[[kubernetes.contexts]]
context_pattern = "arn:aws:eks:(?P<var_region>.*):(?P<var_account>.*):cluster/(?P<var_cluster>.*)"
context_alias = "$var_account/$var_region"

[lua]
format = '\[[$symbol($version)]($style)\]'

[memory_usage]
format = '\[$symbol[$ram( | $swap)]($style)\]'

[nim]
format = '\[[$symbol($version)]($style)\]'

[nix_shell]
format = '\[[$symbol$state( \($name\))]($style)\]'

[nodejs]
format = '\[[$symbol($version)]($style)\]'

[ocaml]
format = '\[[$symbol($version)(\($switch_indicator$switch_name\))]($style)\]'

[openstack]
format = '\[[$symbol$cloud(\($project\))]($style)\]'

[package]
format = '\[[$symbol$version]($style)\]'

[perl]
format = '\[[$symbol($version)]($style)\]'

[php]
format = '\[[$symbol($version)]($style)\]'

[pulumi]
format = '\[[$symbol$stack]($style)\]'

[purescript]
format = '\[[$symbol($version)]($style)\]'

[python]
format = '\[[${symbol}${pyenv_prefix}(${version})(\($virtualenv\))]($style)\]'

[red]
format = '\[[$symbol($version)]($style)\]'

[ruby]
format = '\[[$symbol($version)]($style)\]'

[rust]
format = '\[[$symbol($version)]($style)\]'

[scala]
format = '\[[$symbol($version)]($style)\]'

[spack]
format = '\[[$symbol$environment]($style)\]'

[sudo]
format = '\[[as $symbol]\]'

[swift]
format = '\[[$symbol($version)]($style)\]'

[terraform]
format = '\[[$symbol$workspace]($style)\]'

[time]
format = '\[[$time]($style)\]'

[username]
format = '\[[$user]($style)\]'

[vagrant]
format = '\[[$symbol($version)]($style)\]'

[vlang]
format = '\[[$symbol($version)]($style)\]'

[zig]
format = '\[[$symbol($version)]($style)\]'

































































































[palettes.base16]
base00 = "#2e3440"
base01 = "#3b4252"
base02 = "#434c5e"
base03 = "#4c566a"
base04 = "#d8dee9"
base05 = "#e5e9f0"
base06 = "#eceff4"
base07 = "#8fbcbb"
base08 = "#bf616a"
base09 = "#d08770"
base0A = "#ebcb8b"
base0B = "#a3be8c"
base0C = "#88c0d0"
base0D = "#81a1c1"
base0E = "#b48ead"
base0F = "#5e81ac"

[custom.reboot]
command = """[ "$(uname -r | sed 's/-arch/.arch/')" != "$(pacman -Q linux 2>/dev/null | awk '{print $2}')" ] && echo "‚Üª reboot" || true"""
when = "test -f /usr/bin/pacman"
style = "bold yellow"
format = '\[[$output]($style)\]'
description = "Shows when kernel update requires reboot"
