#!/bin/bash
# Generate custom theme files from base16 colors

# Get current theme colors from a tinty-generated file
get_base16_colors() {
  local colors_file="$HOME/.config/waybar/colors.css"
  [[ ! -f "$colors_file" ]] && return 1
  
  # Extract colors from waybar CSS
  base00=$(grep "@define-color base00" "$colors_file" | awk '{print $3}' | tr -d ';')
  base01=$(grep "@define-color base01" "$colors_file" | awk '{print $3}' | tr -d ';')
  base02=$(grep "@define-color base02" "$colors_file" | awk '{print $3}' | tr -d ';')
  base03=$(grep "@define-color base03" "$colors_file" | awk '{print $3}' | tr -d ';')
  base04=$(grep "@define-color base04" "$colors_file" | awk '{print $3}' | tr -d ';')
  base05=$(grep "@define-color base05" "$colors_file" | awk '{print $3}' | tr -d ';')
  base06=$(grep "@define-color base06" "$colors_file" | awk '{print $3}' | tr -d ';')
  base07=$(grep "@define-color base07" "$colors_file" | awk '{print $3}' | tr -d ';')
  base08=$(grep "@define-color base08" "$colors_file" | awk '{print $3}' | tr -d ';')
  base09=$(grep "@define-color base09" "$colors_file" | awk '{print $3}' | tr -d ';')
  base0A=$(grep "@define-color base0A" "$colors_file" | awk '{print $3}' | tr -d ';')
  base0B=$(grep "@define-color base0B" "$colors_file" | awk '{print $3}' | tr -d ';')
  base0C=$(grep "@define-color base0C" "$colors_file" | awk '{print $3}' | tr -d ';')
  base0D=$(grep "@define-color base0D" "$colors_file" | awk '{print $3}' | tr -d ';')
  base0E=$(grep "@define-color base0E" "$colors_file" | awk '{print $3}' | tr -d ';')
  base0F=$(grep "@define-color base0F" "$colors_file" | awk '{print $3}' | tr -d ';')
}

# Generate SwayOSD theme
generate_swayosd() {
  cat > "$HOME/.config/swayosd/theme.css" << EOF
/* Base16 Theme - Generated */
@define-color background-color $base00;
@define-color border-color $base05;
@define-color label $base05;
@define-color image $base05;
@define-color progress $base0D;
EOF
}

# Generate Walker theme
generate_walker() {
  cat > "$HOME/.config/walker/theme.css" << EOF
/* Base16 Theme - Generated */
@define-color selected-text $base0D;
@define-color text $base05;
@define-color base $base00;
@define-color border $base05;
@define-color foreground $base05;
@define-color background $base00;
EOF
}

# Generate Starship theme
generate_starship() {
  cat > "$HOME/.config/starship-theme.toml" << EOF
# Base16 Theme - Generated
palette = "base16"

[palettes.base16]
base00 = "$base00"
base01 = "$base01"
base02 = "$base02"
base03 = "$base03"
base04 = "$base04"
base05 = "$base05"
base06 = "$base06"
base07 = "$base07"
base08 = "$base08"
base09 = "$base09"
base0A = "$base0A"
base0B = "$base0B"
base0C = "$base0C"
base0D = "$base0D"
base0E = "$base0E"
base0F = "$base0F"
EOF
}

# Generate Hyprlock theme
generate_hyprlock() {
  # Convert hex to RGB
  hex_to_rgb() {
    local hex="${1#\#}"
    printf "%d,%d,%d" 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2}
  }
  
  local rgb00=$(hex_to_rgb "$base00")
  local rgb05=$(hex_to_rgb "$base05")
  local rgb0D=$(hex_to_rgb "$base0D")
  
  cat > "$HOME/.config/hypr/hyprlock-colors.conf" << EOF
# Base16 Theme - Generated

\$color = rgba($rgb00,1.0)

\$inner_color = rgba($rgb00,0.8)
\$outer_color = rgba($rgb05,1.0)

\$font_color = rgba($rgb05,1.0)

\$placeholder_color = rgba($rgb05,0.6)
\$check_color = rgba($rgb0D,1.0)
EOF
}

# Generate Hyprland theme
generate_hyprland() {
  # Remove the # from hex colors
  local border_color="${base05#\#}"
  
  cat > "$HOME/.config/hypr/colors.conf" << EOF
# Base16 Theme - Generated
# This file is auto-generated by the theme system

general {
    # Active window border color
    col.active_border = rgb($border_color)
}
EOF
}

# Generate Fish theme
generate_fish() {
  cat > "$HOME/.config/fish/conf.d/base16.fish" << EOF
# Base16 Theme - Generated
# This file is auto-generated by the theme system

# Set base16 colors
set -g base00 "${base00#\#}"
set -g base01 "${base01#\#}"
set -g base02 "${base02#\#}"
set -g base03 "${base03#\#}"
set -g base04 "${base04#\#}"
set -g base05 "${base05#\#}"
set -g base06 "${base06#\#}"
set -g base07 "${base07#\#}"
set -g base08 "${base08#\#}"
set -g base09 "${base09#\#}"
set -g base0A "${base0A#\#}"
set -g base0B "${base0B#\#}"
set -g base0C "${base0C#\#}"
set -g base0D "${base0D#\#}"
set -g base0E "${base0E#\#}"
set -g base0F "${base0F#\#}"

# Set fish colors
set -g fish_color_normal \$base05
set -g fish_color_command \$base0D
set -g fish_color_quote \$base0B
set -g fish_color_redirection \$base0C
set -g fish_color_end \$base0C
set -g fish_color_error \$base08
set -g fish_color_param \$base05
set -g fish_color_comment \$base03
set -g fish_color_match --background=\$base02
set -g fish_color_selection --background=\$base02
set -g fish_color_search_match --background=\$base02
set -g fish_color_history_current --bold
set -g fish_color_operator \$base0C
set -g fish_color_escape \$base0C
set -g fish_color_autosuggestion \$base03
set -g fish_color_cancel -r
set -g fish_pager_color_completion \$base05
set -g fish_pager_color_description \$base03
set -g fish_pager_color_prefix --bold --underline
set -g fish_pager_color_progress --background=\$base02
EOF
}

# Generate Wofi theme
generate_wofi() {
  # Generate colors file in base16-wofi-colors format
  cat > "$HOME/.config/wofi/colors" << EOF
$base00
$base01
$base02
$base03
$base04
$base05
$base06
$base07
$base08
$base09
$base0A
$base0B
$base0C
$base0D
$base0E
$base0F
EOF
}

# Generate Rofi theme
generate_rofi() {
  # Convert hex to rgba
  hex_to_rgba() {
    local hex="${1#\#}"
    printf "rgba ( %d, %d, %d, 100 %% )" 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2}
  }
  
  cat > "$HOME/.config/rofi/colors.rasi" << EOF
/**
 * Base16 ROFI Color theme
 * Generated by theme system
 */

* {
    red:                         $(hex_to_rgba "$base08");
    blue:                        $(hex_to_rgba "$base0D");
    lightfg:                     $(hex_to_rgba "$base06");
    lightbg:                     $(hex_to_rgba "$base01");
    foreground:                  $(hex_to_rgba "$base05");
    background:                  $(hex_to_rgba "$base00");
    background-color:            rgba ( $((16#${base00:1:2})), $((16#${base00:3:2})), $((16#${base00:5:2})), 0 % );
    separatorcolor:              @foreground;
    border-color:                @foreground;
    selected-normal-foreground:  @lightbg;
    selected-normal-background:  @lightfg;
    selected-active-foreground:  @background;
    selected-active-background:  @blue;
    selected-urgent-foreground:  @background;
    selected-urgent-background:  @red;
    normal-foreground:           @foreground;
    normal-background:           @background;
    active-foreground:           @blue;
    active-background:           @background;
    urgent-foreground:           @red;
    urgent-background:           @background;
    alternate-normal-foreground: @foreground;
    alternate-normal-background: @background;
    alternate-active-foreground: @blue;
    alternate-active-background: @background;
    alternate-urgent-foreground: @red;
    alternate-urgent-background: @background;
}
EOF
}

# Generate Mako theme
generate_mako() {
  cat > "$HOME/.config/mako/colors" << EOF
# Base16 Theme - Generated
# This file is auto-generated by the theme system

background-color=$base00
text-color=$base05
border-color=$base0D

[urgency=low]
background-color=$base00
text-color=$base0A
border-color=$base0D

[urgency=high]
background-color=$base00
text-color=$base08
border-color=$base0D
EOF
}

generate_chromium() {
  hex_to_rgb_comma() {
    local hex="${1#\#}"
    printf "%d,%d,%d" 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2}
  }
  
  local rgb_color=$(hex_to_rgb_comma "$base00")
  
  mkdir -p "$HOME/.config/chromium"
  echo "$rgb_color" > "$HOME/.config/chromium/theme-color"
  
  if command -v chromium &>/dev/null; then
    chromium --no-startup-window --set-theme-color="$rgb_color" 2>/dev/null || true
  fi
}

# Main
get_base16_colors || { echo "Failed to get base16 colors"; exit 1; }

mkdir -p "$HOME/.config/swayosd" "$HOME/.config/walker" "$HOME/.config/hypr" "$HOME/.config/fish/conf.d" "$HOME/.config/wofi" "$HOME/.config/rofi"

generate_swayosd
generate_walker
generate_starship
generate_hyprlock
generate_hyprland
generate_fish
generate_wofi
generate_rofi
generate_mako
generate_chromium

# Generate K9s skin
get_current_slug() {
  if [ -f "$HOME/.local/share/tinted-theming/tinty/current_scheme" ]; then
    cat "$HOME/.local/share/tinted-theming/tinty/current_scheme"
  elif [ -f "$HOME/.local/share/tinted-theming/tinty/artifacts/current_scheme" ]; then
    cat "$HOME/.local/share/tinted-theming/tinty/artifacts/current_scheme"
  else
    echo "base16-current"
  fi
}

generate_k9s() {
  mkdir -p "$HOME/.config/k9s/skins"
  local out_file="$HOME/.config/k9s/skins/base16.yaml"
  cat > "$out_file" << EOF
# Base16 Theme - Generated
k9s:
  body:
    fgColor: "$base05"
    bgColor: "default"
    logoColor: "$base0E"
  info:
    fgColor: "$base0D"
    sectionColor: "$base05"
  dialog:
    fgColor: "$base05"
    bgColor: "default"
    buttonFgColor: "$base05"
    buttonBgColor: "$base0E"
    buttonFocusFgColor: "$base0A"
    buttonFocusBgColor: "$base0D"
    labelFgColor: "$base0A"
    fieldFgColor: "$base05"
  frame:
    border:
      fgColor: "$base02"
      focusColor: "$base02"
    menu:
      fgColor: "$base05"
      keyColor: "$base0D"
      numKeyColor: "$base0D"
    crumbs:
      fgColor: "$base05"
      bgColor: "$base01"
      activeColor: "$base01"
    status:
      newColor: "$base0C"
      modifyColor: "$base0E"
      addColor: "$base0B"
      errorColor: "$base08"
      highlightColor: "$base0A"
      killColor: "$base03"
      completedColor: "$base03"
    title:
      fgColor: "$base05"
      bgColor: "$base01"
      highlightColor: "$base0A"
      counterColor: "$base0E"
      filterColor: "$base0D"
  views:
    charts:
      bgColor: "default"
      defaultDialColors:
      - "$base0E"
      - "$base08"
      defaultChartColors:
      - "$base0E"
      - "$base08"
    table:
      fgColor: "$base05"
      bgColor: "default"
      header:
        fgColor: "$base05"
        bgColor: "default"
        sorterColor: "$base0C"
    xray:
      fgColor: "$base05"
      bgColor: "default"
      cursorColor: "$base01"
      graphicColor: "$base0E"
      showIcons: false
    yaml:
      keyColor: "$base0D"
      colonColor: "$base0E"
      valueColor: "$base05"
    logs:
      fgColor: "$base05"
      bgColor: "default"
      indicator:
        fgColor: "$base05"
        bgColor: "$base0E"
        toggleOnColor: "$base0B"
        toggleOffColor: "$base0D"
EOF
}

generate_k9s

# Ensure K9s uses the base16 skin name in config
ensure_k9s_skin() {
  local cfg="$HOME/.config/k9s/config.yaml"
  mkdir -p "$HOME/.config/k9s"
  local skin_name="base16"
  if command -v yq >/dev/null 2>&1; then
    if [ -f "$cfg" ]; then
      yq -i "del(.k9s.skin) | .k9s.ui.skin = \"${skin_name}\"" "$cfg" || true
    else
      printf "k9s:\n  ui:\n    skin: %s\n" "$skin_name" > "$cfg"
    fi
  else
    if [ ! -f "$cfg" ]; then
      printf "k9s:\n  ui:\n    skin: %s\n" "$skin_name" > "$cfg"
    else
      # Remove any top-level k9s.skin entries
      awk 'BEGIN{skip=0}
           /^\s*skin:\s*/ && prev ~ /^k9s:/ {next}
           {print; prev=$0}' "$cfg" > "$cfg.tmp" && mv "$cfg.tmp" "$cfg"

      if grep -q '^\s*ui:\s*$' "$cfg"; then
        awk -v name="$skin_name" 'BEGIN{ui=0}
             /^\s*ui:\s*$/ {ui=1; print; next}
             ui==1 && /^\s*skin:\s*/ {print "    skin: " name; ui=0; next}
             /^\s*[^ ]/ {ui=0}
             {print}' "$cfg" > "$cfg.tmp" && mv "$cfg.tmp" "$cfg"
      else
        awk -v name="$skin_name" 'BEGIN{printed=0} {print} /^k9s:\s*$/ && !printed {print "  ui:\n    skin: " name; printed=1}' "$cfg" > "$cfg.tmp" && mv "$cfg.tmp" "$cfg"
      fi
    fi
  fi
}

ensure_k9s_skin

 echo "Custom themes generated successfully"
